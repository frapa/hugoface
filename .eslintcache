[{"/home/francesco/Projects/javascript/oguh/src/index.js":"1","/home/francesco/Projects/javascript/oguh/src/services/login.js":"2","/home/francesco/Projects/javascript/oguh/src/components/Admin/Admin.js":"3","/home/francesco/Projects/javascript/oguh/src/components/Login/Login.js":"4","/home/francesco/Projects/javascript/oguh/src/components/Articles/Articles.js":"5","/home/francesco/Projects/javascript/oguh/src/components/Editor/Editor.js":"6","/home/francesco/Projects/javascript/oguh/src/services/git.js":"7","/home/francesco/Projects/javascript/oguh/src/services/articles.js":"8","/home/francesco/Projects/javascript/oguh/src/services/fs.js":"9"},{"size":1494,"mtime":1607871835649,"results":"10","hashOfConfig":"11"},{"size":427,"mtime":1607788490022,"results":"12","hashOfConfig":"11"},{"size":1716,"mtime":1607896739732,"results":"13","hashOfConfig":"11"},{"size":2459,"mtime":1607792498209,"results":"14","hashOfConfig":"11"},{"size":1601,"mtime":1607871835649,"results":"15","hashOfConfig":"11"},{"size":4750,"mtime":1607895947318,"results":"16","hashOfConfig":"11"},{"size":598,"mtime":1607793355220,"results":"17","hashOfConfig":"11"},{"size":2620,"mtime":1607895554001,"results":"18","hashOfConfig":"11"},{"size":130,"mtime":1607785017744,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"183kgl1",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/home/francesco/Projects/javascript/oguh/src/index.js",[],["43","44"],"/home/francesco/Projects/javascript/oguh/src/services/login.js",[],"/home/francesco/Projects/javascript/oguh/src/components/Admin/Admin.js",["45"],"import { useHistory, Link } from \"react-router-dom\";\n\nimport \"./Admin.css\";\nimport logo from \"../../logo.svg\";\nimport { logOut } from \"../../services/login\";\n\nexport default function Admin({ children }) {\n  const history = useHistory();\n\n  function triggerLogout() {\n    logOut();\n    history.push(\"/login\");\n  }\n\n  return (\n    <div className=\"app\">\n      <nav className=\"sidebar has-background-light\">\n        <div className=\"logo has-text-centered\">\n          <img src={logo} alt=\"Hugoface\" />\n        </div>\n\n        <div className=\"menu\">\n          <Link to=\"/dashboard\">\n            <div className=\"menu-item\">\n              <span>Dashboard</span>\n            </div>\n          </Link>\n          <Link to=\"/articles\">\n            <div className=\"menu-item\">\n              <span>Articles</span>\n            </div>\n          </Link>\n          <Link to=\"/pages\">\n            <div className=\"menu-item\">\n              <span>Pages</span>\n            </div>\n          </Link>\n        </div>\n\n        <div className=\"user\">\n          <a href=\"#\" onClick={() => triggerLogout()}>\n            Logout\n          </a>\n        </div>\n      </nav>\n\n      <div className=\"page\">\n        <div className=\"search-bar has-text-centered\">\n          <p className=\"control has-icons-left\">\n            <input\n              className=\"input\"\n              id=\"search\"\n              type=\"text\"\n              placeholder=\"Go to...\"\n            />\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-search\"></i>\n            </span>\n          </p>\n        </div>\n\n        <div className=\"section\">\n          <main className=\"container\">{children}</main>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/francesco/Projects/javascript/oguh/src/components/Login/Login.js",[],"/home/francesco/Projects/javascript/oguh/src/components/Articles/Articles.js",[],"/home/francesco/Projects/javascript/oguh/src/components/Editor/Editor.js",["46"],"import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport fromMarkdown from \"mdast-util-from-markdown\";\n\nimport \"./Editor.css\";\nimport { getArticle, saveArticle } from \"../../services/articles\";\n\nfunction escapeHtml(unsafe) {\n  return unsafe\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#039;\");\n}\n\nfunction unescapeHtml(unsafe) {\n  return unsafe\n    .replace(/&amp;/g, \"&\")\n    .replace(/&lt;/g, \"<\")\n    .replace(/&gt;/g, \">\")\n    .replace(/&quot;/g, '\"')\n    .replace(/&#039;/g, \"'\");\n}\n\nfunction formatParagraph(paragraph, parent) {\n  const ending = parent.type === \"root\" ? \"<br /><br />\" : \"\";\n\n  const content = toMarkdown(paragraph);\n  const trimmedContent = toMarkdown(paragraph).trim();\n\n  // TODO: add support for {{% %}} shortcodes and split shortcodes\n  if (\n    trimmedContent.slice(0, 6) === \"{{&lt;\" &&\n    trimmedContent.slice(-6) === \"&gt;}}\"\n  ) {\n    // const shortcode = trimmedContent.split(\" \", 2)[1];\n    return `<span class=\"has-text-grey-light\">${content}</span>${ending}`;\n  } else {\n    return `${content}${ending}`;\n  }\n}\n\nfunction toMarkdown(tree) {\n  let markdown = \"\";\n\n  let i = 0;\n  for (const child of tree.children) {\n    // HEADING\n    if (child.type === \"heading\") {\n      const prefix = \"#\".repeat(child.depth);\n      const title = toMarkdown(child);\n      markdown += `<strong class=\"\">${prefix} ${title}</strong><br /><br />`;\n      // TEXT\n    } else if (child.type === \"text\") {\n      markdown += escapeHtml(child.value)\n        .replace(/\\r/g, \"\")\n        .replace(/\\n/g, \"<br />\");\n      // PARAGRAPH\n    } else if (child.type === \"paragraph\") {\n      markdown += formatParagraph(child, tree);\n      // LINK\n    } else if (child.type === \"link\") {\n      const content = toMarkdown(child);\n      markdown +=\n        `<a href=\"#\">` +\n        `<span class=\"has-text-grey-light\">[</span>` +\n        content +\n        `<span class=\"has-text-grey-light\">](${child.url})</span>` +\n        `</a>`;\n      // LIST\n    } else if (child.type === \"list\") {\n      markdown += toMarkdown(child) + \"<br />\";\n      // LIST ITEM\n    } else if (child.type === \"listItem\") {\n      const content = toMarkdown(child);\n      markdown += `<strong>-</strong> ${content}<br />`;\n      // WARN\n    } else {\n      console.warn(`Unsupported child type: ${child.type}`);\n    }\n\n    i++;\n  }\n\n  return markdown;\n}\n\nfunction fromEditorHtml(editorHtml) {\n  return unescapeHtml(\n    editorHtml\n      .replace(/<br>|<br \\/>/g, \"\\n\")\n      .replace(/<\\/div>/g, \"\\n\")\n      .replace(/<.+?>/g, \"\")\n  );\n}\n\nfunction toEditorHtml(tree) {\n  console.log(tree);\n  const markdown = toMarkdown(tree);\n  return markdown;\n}\n\nexport default function Editor() {\n  const { filename } = useParams();\n\n  const [article, setArticle] = useState([]);\n  const [tree, setTree] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      const article = await getArticle(filename);\n      console.log(article.body);\n      setArticle(article);\n      setTree(fromMarkdown(article.body));\n    })();\n  }, [filename]);\n\n  function setBody(editorHtml) {\n    if (!article) return;\n\n    const markdown = fromEditorHtml(editorHtml);\n    const newArticle = { ...article, body: markdown };\n\n    setArticle(newArticle);\n    saveArticle(newArticle);\n  }\n\n  if (!article) return <div></div>;\n\n  const editorContent = tree ? toEditorHtml(tree) : \"\";\n\n  console.log((article.body || \"\").trimStart().split(\"\\n\").length);\n\n  return (\n    <div className=\"is-flex is-justify-content-center\">\n      <div className=\"article-data\">\n        <h1 className=\"title\">{article.title}</h1>\n        {/* <div>{article.slug}</div> */}\n        <div className=\"editor-container\">\n          <div\n            className=\"gutter has-text-grey-lighter has-text-right\"\n            dangerouslySetInnerHTML={{\n              __html: (article.body || \"\")\n                .trimStart()\n                .split(\"\\n\")\n                .slice(0, -1)\n                .map((line, i) => {\n                  const extraLines = Math.floor(line.length / 72);\n                  const postfix =\n                    extraLines > 0 ? \"<br />\".repeat(extraLines) : \"\";\n                  return `${i + 1}${postfix}`;\n                })\n                .join(\"<br />\"),\n            }}\n          ></div>\n          <div\n            className=\"editor\"\n            dangerouslySetInnerHTML={{\n              __html: editorContent,\n            }}\n            contentEditable={true}\n            // TODO: other events such as paste, keyup and blur\n            // TODO: debounce\n            onInput={(event) => setBody(event.target.innerHTML)}\n          ></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/francesco/Projects/javascript/oguh/src/services/git.js",[],"/home/francesco/Projects/javascript/oguh/src/services/articles.js",["47","48"],"import yaml from \"yaml\";\nimport toml from \"toml\";\n\nimport { pfs } from \"./fs\";\nimport { DIR } from \"./git\";\n\n// TODO: change this or make configurable\nconst ARTICLE_DIR = DIR + \"/content/post/\";\n\nfunction split(str, separator, limit) {\n  const parts = str.split(separator);\n  return [...parts.slice(0, limit), parts.slice(limit).join(separator)];\n}\n\nfunction parseArticle(filename, content) {\n  // TODO: support all front matter formats\n  content = content.trimStart();\n  let fields, body;\n  if (content.slice(0, 3) === \"---\") {\n    // YAML front matter\n    const [_, header, articleBody] = split(content, \"---\", 2);\n    fields = yaml.parse(header);\n    body = articleBody;\n  } else if (content.slice(0, 3) === \"+++\") {\n    // TOML front matter\n    const [_, header, articleBody] = split(content, \"+++\", 2);\n    fields = toml.parse(header);\n    body = articleBody;\n  } else if (content.slice(0, 2) === \"#+\") {\n    // ORG MODE front matter\n    throw new Error(\"Org mode front matter is not supported yet\");\n  } else if (content[0] === \"{\") {\n    // JSON front matter\n    throw new Error(\"JSON front matter is not supported yet\");\n  } else {\n    throw new Error(`Invalid front matter in file '${filename}'`);\n  }\n\n  if (fields.hasOwnProperty(\"date\")) {\n    fields[\"date\"] = new Date(fields[\"date\"]);\n  }\n\n  return {\n    filename,\n    ...fields,\n    body,\n  };\n}\n\nexport async function listArticles() {\n  // TODO: pagination\n  let files;\n  try {\n    files = await pfs.readdir(ARTICLE_DIR);\n  } catch {\n    return [];\n  }\n\n  const filesContent = await Promise.all(\n    files.map((filename) => pfs.readFile(ARTICLE_DIR + filename))\n  );\n\n  return filesContent.map((byteContent, i) => {\n    const content = new TextDecoder(\"utf-8\").decode(byteContent);\n    return parseArticle(files[i], content);\n  });\n}\n\nexport async function getArticle(filename) {\n  const byteContent = await pfs.readFile(ARTICLE_DIR + filename);\n  const content = new TextDecoder(\"utf-8\").decode(byteContent);\n  return parseArticle(filename, content);\n}\n\nexport async function saveArticle(article) {\n  const filename = article.filename;\n\n  if (!filename) {\n    console.error(article);\n    throw new Error(`filename cannot be empty, but is ${article.filename}`);\n  }\n\n  const body = article.body;\n  const frontMatter = JSON.parse(JSON.stringify(article));\n  delete frontMatter.filename;\n  delete frontMatter.body;\n\n  const yamlFrontMatter = yaml.stringify(frontMatter);\n  const content = `---\\n${yamlFrontMatter}\\n---\\n${body}`;\n\n  const byteContent = new TextEncoder(\"utf-8\").encode(content);\n  await pfs.writeFile(ARTICLE_DIR + filename, byteContent);\n}\n","/home/francesco/Projects/javascript/oguh/src/services/fs.js",[],["49","50"],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":41,"column":11,"nodeType":"57","endLine":41,"endColumn":55},{"ruleId":"58","severity":1,"message":"59","line":83,"column":5,"nodeType":"60","messageId":"61","endLine":83,"endColumn":6},{"ruleId":"58","severity":1,"message":"62","line":21,"column":12,"nodeType":"60","messageId":"61","endLine":21,"endColumn":13},{"ruleId":"58","severity":1,"message":"62","line":26,"column":12,"nodeType":"60","messageId":"61","endLine":26,"endColumn":13},{"ruleId":"51","replacedBy":"63"},{"ruleId":"53","replacedBy":"64"},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'i' is assigned a value but never used.","Identifier","unusedVar","'_' is assigned a value but never used.",["65"],["66"],"no-global-assign","no-unsafe-negation"]