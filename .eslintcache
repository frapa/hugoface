[{"/home/francesco/Projects/javascript/oguh/src/index.js":"1","/home/francesco/Projects/javascript/oguh/src/services/login.js":"2","/home/francesco/Projects/javascript/oguh/src/components/Admin/Admin.js":"3","/home/francesco/Projects/javascript/oguh/src/components/Login/Login.js":"4","/home/francesco/Projects/javascript/oguh/src/components/Articles/Articles.js":"5","/home/francesco/Projects/javascript/oguh/src/components/Editor/Editor.js":"6","/home/francesco/Projects/javascript/oguh/src/services/git.js":"7","/home/francesco/Projects/javascript/oguh/src/services/articles.js":"8","/home/francesco/Projects/javascript/oguh/src/services/fs.js":"9","/home/francesco/Projects/javascript/oguh/src/components/SearchBar/SearchBar.js":"10","/home/francesco/Projects/javascript/oguh/src/components/SideBar/SideBar.js":"11","/home/francesco/Projects/javascript/oguh/src/components/PublishButton/PublishButton.js":"12","/home/francesco/Projects/javascript/oguh/src/services/context.js":"13"},{"size":1986,"mtime":1608234623319,"results":"14","hashOfConfig":"15"},{"size":427,"mtime":1607788490022,"results":"16","hashOfConfig":"15"},{"size":408,"mtime":1608234559004,"results":"17","hashOfConfig":"15"},{"size":2459,"mtime":1607792498209,"results":"18","hashOfConfig":"15"},{"size":2225,"mtime":1608233901341,"results":"19","hashOfConfig":"15"},{"size":7969,"mtime":1608234525536,"results":"20","hashOfConfig":"15"},{"size":1835,"mtime":1608238259820,"results":"21","hashOfConfig":"15"},{"size":2992,"mtime":1608150700029,"results":"22","hashOfConfig":"15"},{"size":130,"mtime":1607785017744,"results":"23","hashOfConfig":"15"},{"size":840,"mtime":1608235676785,"results":"24","hashOfConfig":"15"},{"size":1118,"mtime":1608149565434,"results":"25","hashOfConfig":"15"},{"size":3493,"mtime":1608237965399,"results":"26","hashOfConfig":"15"},{"size":201,"mtime":1608234441729,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"183kgl1",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/home/francesco/Projects/javascript/oguh/src/index.js",[],["59","60"],"/home/francesco/Projects/javascript/oguh/src/services/login.js",[],"/home/francesco/Projects/javascript/oguh/src/components/Admin/Admin.js",[],"/home/francesco/Projects/javascript/oguh/src/components/Login/Login.js",[],"/home/francesco/Projects/javascript/oguh/src/components/Articles/Articles.js",[],"/home/francesco/Projects/javascript/oguh/src/components/Editor/Editor.js",["61"],"import { useContext, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport fromMarkdown from \"mdast-util-from-markdown\";\n\nimport \"./Editor.css\";\nimport { getArticle, saveArticle } from \"../../services/articles\";\nimport { AppContext } from \"../../services/context\";\nimport { isDirty } from \"../../services/git\";\n\nfunction escapeHtml(unsafe) {\n  return unsafe\n    .replace(/&/g, \"&amp;\")\n    .replace(/</g, \"&lt;\")\n    .replace(/>/g, \"&gt;\")\n    .replace(/\"/g, \"&quot;\")\n    .replace(/'/g, \"&#039;\");\n}\n\nfunction unescapeHtml(unsafe) {\n  return unsafe\n    .replace(/&amp;/g, \"&\")\n    .replace(/&lt;/g, \"<\")\n    .replace(/&gt;/g, \">\")\n    .replace(/&quot;/g, '\"')\n    .replace(/&#039;/g, \"'\");\n}\n\nfunction formatParagraph(paragraph, parent) {\n  const ending = parent.type === \"root\" ? \"<br /><br />\" : \"\";\n\n  const content = toMarkdown(paragraph);\n  const trimmedContent = toMarkdown(paragraph).trim();\n\n  // TODO: add support for {{% %}} shortcodes and split shortcodes\n  if (\n    trimmedContent.slice(0, 6) === \"{{&lt;\" &&\n    trimmedContent.slice(-6) === \"&gt;}}\"\n  ) {\n    // const shortcode = trimmedContent.split(\" \", 2)[1];\n    return `<span class=\"has-text-grey-light\">${content}</span>${ending}`;\n  } else {\n    return `${content}${ending}`;\n  }\n}\n\nfunction toMarkdown(tree) {\n  let markdown = \"\";\n\n  let i = 0;\n  for (const child of tree.children) {\n    // HEADING\n    if (child.type === \"heading\") {\n      const prefix = \"#\".repeat(child.depth);\n      const title = toMarkdown(child);\n      markdown += `<strong class=\"\">${prefix} ${title}</strong><br /><br />`;\n      // TEXT\n    } else if (child.type === \"text\") {\n      markdown += escapeHtml(child.value)\n        .replace(/\\r/g, \"\")\n        .replace(/\\n/g, \"<br />\");\n      // PARAGRAPH\n    } else if (child.type === \"paragraph\") {\n      markdown += formatParagraph(child, tree);\n      // LINK\n    } else if (child.type === \"link\") {\n      const content = toMarkdown(child);\n      markdown +=\n        `<a href=\"#\">` +\n        `<span class=\"has-text-grey-light\">[</span>` +\n        content +\n        `<span class=\"has-text-grey-light\">](${child.url})</span>` +\n        `</a>`;\n      // LIST\n    } else if (child.type === \"list\") {\n      markdown += toMarkdown(child) + \"<br />\";\n      // LIST ITEM\n    } else if (child.type === \"listItem\") {\n      const content = toMarkdown(child);\n      markdown += `<strong>-</strong> ${content}<br />`;\n      // WARN\n    } else {\n      console.warn(`Unsupported child type: ${child.type}`);\n    }\n\n    i++;\n  }\n\n  return markdown;\n}\n\nfunction fromEditorHtml(editorHtml) {\n  return unescapeHtml(\n    editorHtml\n      .replace(/<br>|<br \\/>/g, \"\\n\")\n      .replace(/<\\/div>/g, \"\\n\")\n      .replace(/<.+?>/g, \"\")\n  );\n}\n\nfunction toEditorHtml(tree) {\n  console.log(tree);\n  const markdown = toMarkdown(tree);\n  return markdown;\n}\n\n// function lineNumbersHtml(articleBody) {\n//   return (articleBody || \"\")\n//     .trimStart()\n//     .split(\"\\n\")\n//     .slice(0, -1)\n//     .map((line, i) => {\n//       const extraLines = Math.floor(line.length / 72);\n//       const postfix = extraLines > 0 ? \"<br />\".repeat(extraLines) : \"\";\n//       return `${i + 1}${postfix}`;\n//     })\n//     .join(\"<br />\");\n// }\n\nfunction slugify(title) {\n  return title\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\")\n    .replace(/[^\\w-]/g, \"\");\n}\n\nexport default function Editor() {\n  const { filename } = useParams();\n  const { context, setContext } = useContext(AppContext);\n\n  const [article, setArticle] = useState([]);\n  const [tree, setTree] = useState(null);\n\n  useEffect(() => {\n    (async () => {\n      const article = await getArticle(filename);\n      setArticle(article);\n      setTree(fromMarkdown(article.body));\n    })();\n  }, [filename]);\n\n  function setAndSaveArticle(article) {\n    if (!article) return;\n\n    setArticle(article);\n    saveArticle(article);\n\n    (async () => {\n      setContext({\n        ...context,\n        dirty: await isDirty(),\n      });\n    })();\n  }\n\n  function setBody(editorHtml) {\n    if (!article) return;\n\n    const markdown = fromEditorHtml(editorHtml);\n    const newArticle = { ...article, body: markdown };\n\n    setAndSaveArticle(newArticle);\n  }\n\n  function setTitle(title) {\n    // Only change the slug if it wasn't changed by the user\n    let slug = article.slug;\n    const currentTitleSlug = slugify(article.title);\n    if (article.slug === currentTitleSlug) {\n      slug = slugify(title);\n    }\n\n    setAndSaveArticle({ ...article, title, slug });\n  }\n\n  if (!article) return <div></div>;\n\n  const editorContent = tree ? toEditorHtml(tree) : \"\";\n\n  return (\n    <div className=\"is-flex is-justify-content-center\">\n      <div className=\"article-data\">\n        <input\n          className=\"input title\"\n          type=\"text\"\n          value={article.title || \"\"}\n          onChange={(event) => setTitle(event.target.value)}\n        />\n\n        {/* <div class=\"field is-horizontal\">\n          <div class=\"field-label is-normal\">\n            <label class=\"label\">Published</label>\n          </div>\n          <div class=\"field-body\">\n            <div class=\"field\">\n              <div class=\"control is-expanded has-icons-left\">\n                <span class=\"icon is-small is-left\">\n                  <i class=\"fas fa-calendar-alt\"></i>\n                </span>\n                <input\n                  className=\"input\"\n                  type=\"date\"\n                  value={\n                    article.date && article.date.toISOString().split(\"T\")[0]\n                  }\n                  onChange={(event) =>\n                    setAndSaveArticle({\n                      ...article,\n                      date: new Date(event.target.value),\n                    })\n                  }\n                />\n              </div>\n            </div>\n          </div>\n        </div> */}\n\n        <div className=\"field is-horizontal\">\n          <div className=\"field-label is-normal\">\n            <label className=\"label\">Slug</label>\n          </div>\n          <div className=\"field-body\">\n            <div className=\"field has-addons\">\n              <div className=\"control is-expanded has-icons-left\">\n                <span className=\"icon is-small is-left\">\n                  <i className=\"fas fa-link\"></i>\n                </span>\n                <input\n                  className=\"input\"\n                  type=\"text\"\n                  value={article.slug || \"\"}\n                  onChange={(event) =>\n                    setAndSaveArticle({\n                      ...article,\n                      slug: event.target.value,\n                    })\n                  }\n                />\n              </div>\n              <p className=\"control\">\n                <button\n                  className=\"button has-tooltip-bottom\"\n                  data-tooltip=\"Reset slug based on title\"\n                  onClick={() =>\n                    setAndSaveArticle({\n                      ...article,\n                      slug: slugify(article.title),\n                    })\n                  }\n                >\n                  <span className=\"icon\">\n                    <i className=\"fas fa-undo\"></i>\n                  </span>\n                </button>\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* <div>{article.slug}</div> */}\n\n        <div className=\"editor-container\">\n          {/* <div\n            className=\"gutter has-text-grey-lighter has-text-right\"\n            dangerouslySetInnerHTML={{\n              __html: lineNumbersHtml(article.body),\n            }}\n          ></div> */}\n          <div\n            className=\"editor\"\n            dangerouslySetInnerHTML={{\n              __html: editorContent,\n            }}\n            contentEditable={true}\n            // TODO: other events such as paste, keyup and blur\n            // TODO: debounce\n            onInput={(event) => setBody(event.target.innerHTML)}\n          ></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/francesco/Projects/javascript/oguh/src/services/git.js",[],"/home/francesco/Projects/javascript/oguh/src/services/articles.js",["62","63"],"import yaml from \"yaml\";\nimport toml from \"toml\";\n\nimport { pfs } from \"./fs\";\nimport { DIR } from \"./git\";\n\n// TODO: change this or make configurable\nconst ARTICLE_DIR = DIR + \"/content/post/\";\n\nfunction split(str, separator, limit) {\n  const parts = str.split(separator);\n  return [...parts.slice(0, limit), parts.slice(limit).join(separator)];\n}\n\nfunction parseArticle(filename, content) {\n  // TODO: support all front matter formats\n  content = content.trimStart();\n  let fields, body;\n  if (content.slice(0, 3) === \"---\") {\n    // YAML front matter\n    const [_, header, articleBody] = split(content, \"---\", 2);\n    fields = yaml.parse(header);\n    body = articleBody;\n  } else if (content.slice(0, 3) === \"+++\") {\n    // TOML front matter\n    const [_, header, articleBody] = split(content, \"+++\", 2);\n    fields = toml.parse(header);\n    body = articleBody;\n  } else if (content.slice(0, 2) === \"#+\") {\n    // ORG MODE front matter\n    throw new Error(\"Org mode front matter is not supported yet\");\n  } else if (content[0] === \"{\") {\n    // JSON front matter\n    throw new Error(\"JSON front matter is not supported yet\");\n  } else {\n    throw new Error(`Invalid front matter in file '${filename}'`);\n  }\n\n  if (fields.hasOwnProperty(\"date\")) {\n    fields[\"date\"] = new Date(fields[\"date\"]);\n  }\n\n  return {\n    filename,\n    ...fields,\n    body,\n  };\n}\n\nexport async function listArticles() {\n  // TODO: pagination\n  let files;\n  try {\n    files = await pfs.readdir(ARTICLE_DIR);\n  } catch {\n    return [];\n  }\n\n  const filesContent = await Promise.all(\n    files.map((filename) => pfs.readFile(ARTICLE_DIR + filename))\n  );\n\n  return filesContent.map((byteContent, i) => {\n    const content = new TextDecoder(\"utf-8\").decode(byteContent);\n    return parseArticle(files[i], content);\n  });\n}\n\nexport async function getArticle(filename) {\n  const byteContent = await pfs.readFile(ARTICLE_DIR + filename);\n  const content = new TextDecoder(\"utf-8\").decode(byteContent);\n  return parseArticle(filename, content);\n}\n\nexport async function saveArticle(article) {\n  if (article.hasOwnProperty(\"date\") && article.date instanceof Date) {\n    article.date = article.date.toISOString();\n  }\n\n  const filename = article.filename;\n\n  if (!filename) {\n    console.error(article);\n    throw new Error(`filename cannot be empty, but is ${article.filename}`);\n  }\n\n  const body = article.body;\n  const frontMatter = JSON.parse(JSON.stringify(article));\n  delete frontMatter.filename;\n  delete frontMatter.body;\n\n  const yamlFrontMatter = yaml.stringify(frontMatter);\n  const content = `---\\n${yamlFrontMatter}\\n---\\n${body}`;\n\n  const byteContent = new TextEncoder(\"utf-8\").encode(content);\n  await pfs.writeFile(ARTICLE_DIR + filename, byteContent);\n}\n\nexport function newArticle() {\n  return {\n    filename: \"draft-\" + new Date().toISOString() + \".md\",\n    body: \"\",\n  };\n}\n\nexport async function newSavedArticle() {\n  const article = newArticle();\n  await saveArticle(article);\n  return article;\n}\n","/home/francesco/Projects/javascript/oguh/src/services/fs.js",[],"/home/francesco/Projects/javascript/oguh/src/components/SearchBar/SearchBar.js",["64"],"import \"./SearchBar.css\";\nimport PublishButton from \"../PublishButton/PublishButton\";\nimport { AppContext } from \"../../services/context\";\n\nexport default function SearchBar() {\n  return (\n    <div className=\"search-bar has-background-white-bis\">\n      <div className=\"columns\">\n        <div className=\"column is-narrow\"></div>\n\n        <div className=\"column px-2\">\n          <p className=\"control has-icons-left\">\n            <input\n              className=\"input\"\n              id=\"search\"\n              type=\"text\"\n              placeholder=\"Go to...\"\n            />\n            <span className=\"icon is-small is-left\">\n              <i className=\"fas fa-search\"></i>\n            </span>\n          </p>\n        </div>\n\n        <div className=\"column is-narrow\">\n          <PublishButton />\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/francesco/Projects/javascript/oguh/src/components/SideBar/SideBar.js",["65"],"import { useHistory, Link } from \"react-router-dom\";\n\nimport \"./SideBar.css\";\nimport logo from \"../../logo.svg\";\nimport { logOut } from \"../../services/login\";\nimport { isDirty } from \"../../services/git\";\n\nexport default function SideBar() {\n  const history = useHistory();\n\n  isDirty();\n\n  function triggerLogout() {\n    logOut();\n    history.push(\"/login\");\n  }\n\n  return (\n    <nav className=\"sidebar has-background-light\">\n      <div className=\"logo has-text-centered\">\n        <img src={logo} alt=\"Hugoface\" />\n      </div>\n\n      <div className=\"menu\">\n        <Link to=\"/dashboard\">\n          <div className=\"menu-item\">\n            <span>Dashboard</span>\n          </div>\n        </Link>\n        <Link to=\"/articles\">\n          <div className=\"menu-item\">\n            <span>Articles</span>\n          </div>\n        </Link>\n        {/* <Link to=\"/pages\">\n        <div className=\"menu-item\">\n          <span>Pages</span>\n        </div>\n      </Link> */}\n      </div>\n\n      <div className=\"user\">\n        <a href=\"#\" onClick={() => triggerLogout()}>\n          Logout\n        </a>\n      </div>\n    </nav>\n  );\n}\n","/home/francesco/Projects/javascript/oguh/src/components/PublishButton/PublishButton.js",[],"/home/francesco/Projects/javascript/oguh/src/services/context.js",[],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":85,"column":5,"nodeType":"72","messageId":"73","endLine":85,"endColumn":6},{"ruleId":"70","severity":1,"message":"74","line":21,"column":12,"nodeType":"72","messageId":"73","endLine":21,"endColumn":13},{"ruleId":"70","severity":1,"message":"74","line":26,"column":12,"nodeType":"72","messageId":"73","endLine":26,"endColumn":13},{"ruleId":"70","severity":1,"message":"75","line":3,"column":10,"nodeType":"72","messageId":"73","endLine":3,"endColumn":20},{"ruleId":"76","severity":1,"message":"77","line":43,"column":9,"nodeType":"78","endLine":43,"endColumn":53},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'i' is assigned a value but never used.","Identifier","unusedVar","'_' is assigned a value but never used.","'AppContext' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]